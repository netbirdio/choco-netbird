name: Publish Netbird to Winget

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Netbird version to publish (e.g., 0.59.7)'
        required: true
        type: string

jobs:
  publish-winget:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up WingetCreate
        run: |
          Invoke-WebRequest https://aka.ms/wingetcreate/latest -OutFile wingetcreate.exe

      - name: Determine version
        id: version
        run: |
          if ("${{ github.event_name }}" -eq "workflow_dispatch") {
            $version = "${{ github.event.inputs.version }}"
          } else {
            # Extract version from release tag (remove 'v' prefix if present)
            $version = "${{ github.event.release.tag_name }}".TrimStart('v')
          }
          echo "VERSION=$version" >> $env:GITHUB_ENV
          echo "version=$version" >> $env:GITHUB_OUTPUT

      - name: Fetch release info
        id: release_info
        env:
          GH_API: https://api.github.com
          WINGET_PAT: ${{ secrets.WINGET_PAT }}
        run: |
          $ErrorActionPreference = 'Stop'

          $headers = @{
            Authorization         = "Bearer $env:WINGET_PAT"
            "User-Agent"          = "netbird-winget-action"
            Accept                = "application/vnd.github+json"
            "X-GitHub-Api-Version"= "2022-11-28"
          }

          if ("${{ github.event_name }}" -eq "workflow_dispatch") {
            # For manual dispatch, fetch release info from GitHub API
            $release = Invoke-RestMethod -Headers $headers -Uri "$env:GH_API/repos/netbirdio/netbird/releases/tags/v${{ env.VERSION }}"
          } else {
            # For release event, use the current release
            $release = Invoke-RestMethod -Headers $headers -Uri "${{ github.event.release.url }}"
          }

          $urls = @(
            ($assets | Where-Object { $_.name -like "*windows_amd64.msi" } | Select-Object -ExpandProperty browser_download_url -First 1),
            ($assets | Where-Object { $_.name -like "*windows_amd64.exe" } | Select-Object -ExpandProperty browser_download_url -First 1),
            ($assets | Where-Object { $_.name -like "*windows_arm64.msi" } | Select-Object -ExpandProperty browser_download_url -First 1),
            ($assets | Where-Object { $_.name -like "*windows_arm64.exe" } | Select-Object -ExpandProperty browser_download_url -First 1)
          ) | Where-Object { $_ }

          if (-not $urls -or $urls.Count -eq 0) {
            throw "No Windows installers found in v${{ env.VERSION }}."
          }

          # Pick a primary (x64 MSI) for consumers that expect a single URL
          $primary = $urls | Where-Object { $_ -like "*.msi" -and $_ -match "amd64" } | Select-Object -First 1
          if (-not $primary) { $primary = $urls[0] }

          # Output: single-line
          "installer_url=$primary" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

          # Output: multiline list of all installer URLs
          $delimUrls = "EOF_$([Guid]::NewGuid().ToString('N'))"
          Add-Content $env:GITHUB_OUTPUT "installer_urls<<$delimUrls"
          $urls | ForEach-Object { Add-Content $env:GITHUB_OUTPUT $_ }
          Add-Content $env:GITHUB_OUTPUT $delimUrls

          # Output: release notes (multiline; normalize to LF)
          $notes = ($release.body ?? "") -replace "`r",""
          $delimNotes = "EOF_$([Guid]::NewGuid().ToString('N'))"
          Add-Content $env:GITHUB_OUTPUT "release_notes<<$delimNotes"
          Add-Content $env:GITHUB_OUTPUT $notes
          Add-Content $env:GITHUB_OUTPUT $delimNotes

      - name: Update Winget Manifest
        run: |
          Write-Host "Updating Winget manifest for Netbird version ${{ env.VERSION }}"
          Write-Host "Installer URL: ${{ steps.release_info.outputs.installer_url }}"
          
          # Use wingetcreate to update and submit the manifest
          .\wingetcreate.exe update Netbird.Netbird `
            --version ${{ env.VERSION }} `
            --urls ${{ steps.release_info.outputs.installer_url }} `
            --submit `
            --token ${{ secrets.WINGET_PAT }} `

      - name: Verify submission
        run: |
          if ($LASTEXITCODE -eq 0) {
            Write-Host "✅ Successfully submitted Winget manifest update for Netbird ${{ env.VERSION }}"
          } else {
            Write-Error "❌ Failed to submit Winget manifest update"
            exit 1
          }
